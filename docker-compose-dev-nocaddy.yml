version: '2.4'

services:
    db:
      container_name: ${COMPOSE_PROJECT_NAME}_db_dev
      networks:
        - compose_network_name
      extends:
        file: docker-compose-base.yml
        service: db
      environment:
        MYSQL_DATABASE: "${COMPOSE_PROJECT_NAME}"
        MYSQL_USER: "${MYSQL_USER}"
        MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
        MYSQL_RANDOM_ROOT_PASSWORD: '1'
      healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', '$MYSQL_USER', '-p$MYSQL_PASSWORD']
            timeout: 20s
            retries: 3
      volumes:
              ##TODO: mysql docker image logs to sdout, so where do we get logs?
              - database-dev:/var/lib/mysql

    wordpress:
      container_name: ${COMPOSE_PROJECT_NAME}_app_dev
      extends:
        file: docker-compose-base.yml
        service: wordpress
      env_file: "${ENV_FILE}"
      networks:
              compose_network_name:
              reverse-proxy-net:
                      aliases:
                              - wordpress_${INSTANCE_NAME}
      environment:
              WORDPRESS_DB_HOST: db
              WORDPRESS_DB_USER: "${MYSQL_USER}"
              WORDPRESS_DB_PASSWORD: "${MYSQL_PASSWORD}"
              WORDPRESS_DB_NAME: "${COMPOSE_PROJECT_NAME}"
      depends_on:
        db:
                condition: service_healthy
      volumes:
          - app-logs-dev:/var/www/html


#TODO: for whatever reason volumes declaration has to be included here, not in docker-compose-base.yml file
volumes:
    database-dev: {}
    app-logs-dev: {}

networks:
      compose_network_name:
              name: "${COMPOSE_PROJECT_NAME}"  
      reverse-proxy-net:
              name: reverse-proxy-net
              external: true
