version: '2.4'

services:
    db:
      container_name: ${COMPOSE_PROJECT_NAME}_db_prod
      extends:
        file: docker-compose-base.yml
        service: db
      environment:
        MYSQL_DATABASE: "${COMPOSE_PROJECT_NAME}"
        MYSQL_USER: "${MYSQL_USER}"
        MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
        MYSQL_RANDOM_ROOT_PASSWORD: '1'
      healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', '$MYSQL_USER', '-p$MYSQL_PASSWORD']
            timeout: 20s
            retries: 3
      volumes:
              ##TODO: mysql docker image logs to sdout, so where do we get logs?
              - database-prod:/var/lib/mysql

    wordpress:
      container_name: ${COMPOSE_PROJECT_NAME}_app_prod
      extends:
        file: docker-compose-base.yml
        service: wordpress
      env_file: "${ENV_FILE}"
      environment:
              WORDPRESS_DB_HOST: db
              WORDPRESS_DB_USER: "${MYSQL_USER}"
              WORDPRESS_DB_PASSWORD: "${MYSQL_PASSWORD}"
              WORDPRESS_DB_NAME: "${COMPOSE_PROJECT_NAME}"
      depends_on:
        db:
                condition: service_healthy
      volumes:
          - app-logs-prod:/var/www/html

    caddy:
      image: caddy:2-alpine
      container_name: ${COMPOSE_PROJECT_NAME}_caddy_prod
      ports: 
        - "443:443"
        - "80:80"

      #TODO: create caddy-alpine based image with entrypoint to replace vhost config in caddy configfile
      #TODO: also log access-logs to sdout to replace the bind mount caddy-logs-prod
      volumes:
              - ./config/Caddyfile-prod:/etc/caddy/Caddyfile
              - caddy-data-prod:/data
              - caddy-config-prod:/config
              - caddy-logs-prod:/var/log/



#TODO: for whatever reason volumes declaration has to be included here, not in docker-compose-base.yml file
volumes:
    database-prod: {}
    caddy-data-prod: {}
    caddy-config-prod: {}
    app-logs-prod: {}
    caddy-logs-prod: {}
